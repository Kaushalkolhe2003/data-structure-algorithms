#include<iostream>
#include<vector>
using namespace std;
int main(){
    
    vector <int> v;
    cout<<"Size-->"<<v.capacity()<<endl;
    vector<int> A{1,3,4,65,7,34};
    for(int i=0;i<A.size();i++){
        cout<<A.at(i)<<endl;
        
    }
    cout<<A.back()<<endl;
    cout<<A.front()<<endl;
    vector<int>  v1={1,2,3,4,5};  
vector<int>  v2={6,7,8,9,10};  
cout<<"Before swapping,elements of v1 are :";  
for (int i=0;i<v1.size();i++)  
cout<<v1[i]<<" ";  
cout<<'\n'; 

cout<<"Before swapping,elements of v2 are :";  
for(int i=0;i<v2.size();i++)  
cout<<v2[i]<<" ";  
cout<<'\n';  
v1.swap(v2); 

cout<<"After swapping,elements of v1 are  :";  
for(int i=0;i<v1.size();i++)  
cout<<v1[i]<<" ";  
cout<<'\n'; 

cout<<"After swapping,elements of v2 are:";  
for(int i=0;i<v2.size();i++) { 
cout<<v2[i]<<" "; }
cout<<endl;


// function  [push_back() implementation]
   vector<char> b;  
    b.push_back('j');  
    b.push_back('a');  
    b.push_back('v');  
    b.push_back('a');  
    for(int i=0;i<b.size();i++) { 
    cout<<b[i]<<endl;  
    }

//function for poping elements use pop_back() function.
vector <int> a{1,34,6,7,98,0,54};
a.pop_back();
a.pop_back();
for(int i=0;i<a.size();i++){
    cout<<a[i]<<" "<<endl;
}

//function to check wheather a vector is empty or not.
cout<<b.empty()<<endl;;
cout<<b.size()<<endl;
cout<<endl;
cout<<endl;

//function insert()
//syntax insert(iterator,val);  
//insert(iterator,n,val);  
//insert(iterator,InputIterator first,InputIterator last)
//iterator means at which position and val which values to be inserted ,n: Number of times the value is to be occurred.
vector <int> g{2,4};
g.insert(g.begin()+1,3);
g.insert(g.begin()+2,2,9);
g.insert(g.begin()+4,45);
for(int i=0;i<g.size();i++){
    cout<<g[i]<<endl;
}
cout<<endl;
cout<<endl;

//erase(position); function
a.erase(a.begin()+1);
for(int i=0;i<a.size();i++){
    cout<<a[i]<<endl;
}

//clear() function
// size is geting zero not capacity.imp*
vector <int>k{3,5,6,4,3,87};
k.clear();
for(int j=0;j<k.size();j++){
    cout<<k[j]<<endl;
    
}
cout<<"capacity-->"<<k.capacity()<<endl;
cout<<"size-->"<<k.size()<<endl;
cout<<endl;

//max_size() function determine maxi size the vector can hold;

cout<<"max-->"<<k.max_size()<<;








    return 0;
}
