#include<iostream>
#include<queue>
using namespace std;

class Node{
    public:
    int data;
    Node *left;
    Node *right;
    
    Node(int d){
        this->data=d;
        this->left=NULL;
        this->right=NULL;
    }
    
};
Node * building_tree(Node *root){
    cout<<"Enter the data:"<<endl;
    int data;
    cin>>data;
    root=new Node(data);
    
    if(data==-1){
        return NULL;
    }
    
    cout<<"Enter the data for inserting in left of "<<data<<endl;
    root->left=building_tree(root->left);
    cout<<"Entter the data for inserting in right of "<<data<<endl;
    root->right=building_tree(root->right);
    return root;
}
void levelorder_tranversal(Node *root){
    queue<Node *>q ;
    q.push(root);
    q.push(NULL);
    while(!q.empty()){
        Node *temp=q.front();
        q.pop();
        if(temp==NULL){
            cout<<endl;
            if(!q.empty()){
                q.push(NULL);
            }
            
        }
        else{
            cout<<temp->data<<" ";
            
            if(temp->left){
                q.push(temp->left);
            }
            if(temp->right){
                q.push(temp->right);
            }
            
        }
    }
}
void inorder(Node *root){
    //base case
    if(root==NULL){
        return;
    }
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
}
void preorder(Node *root){
    //base case
    if(root==NULL){
        return ;
    }
    cout<<root->data<<" ";
    preorder(root->left);
    preorder(root->right);
}
void postorder(Node *root){
    if(root==NULL){
        return ;
    }
    
    postorder(root->left);
    postorder(root->right);
    cout<<root->data<<" ";
    
    
}
int get_height(Node *&root){
    if(root==NULL){
        return 0;
    }
    int left=get_height(root->left);
    int right=get_height(root->right);
    int ans=max(left,right)+1;
    
    return ans;
}
int main(){
    Node *root=NULL;
    root=building_tree(root);
    // 1 3 4 -1 -1 9 -1 -1 7 6 -1 -1 -1
    
    /*
    cout<<"Printing the level order transversal output :"<<endl;
    levelorder_tranversal(root);
    cout<<"Inorder for the given tree is "<<endl;
    inorder(root);
    cout<<endl;
    cout<<"Preorder for the given tree is "<<endl;
    preorder(root);
    cout<<endl;
    cout<<"Postorder for the given tree is "<<endl;
    postorder(root);
    cout<<endl;
    */
    int height=get_height(root);
    cout<<"The maxi height of the binary tree is :"<<height<<endl;
}

