#include<iostream>
using namespace std;
class heap{
  public :
  int arr[100];
  int size;
  heap(){
      arr[0]=-1;
      size=0;
  }
  void insert(int val){
      size=size+1;
      int index=size;
      arr[index]=val;
      
      while(index > 1){
          int parent=index/2;
          
          if(arr[parent]<arr[index]){
              swap(arr[parent],arr[index]);
              index=parent;
          }
          else{
              return;
          }
      }
      
  }
  void print(){
      for(int i=1;i<=size;i++){
          cout<<arr[i]<<" ";
      }
      cout<<endl;
      
  }
  void delete_element(){
      if(size==0){
          cout<<"No element to delete"<<endl;
          return;
      }
      arr[1]=arr[size];
      size--;
      
      //take root node to its correct position
      int i=1;
      while(i<size){
          int leftindex=2*i;
          int rightindex=2*i+1;
          if(leftindex < size && arr[i]<arr[leftindex]){
              swap(arr[leftindex],arr[i]);
              i=leftindex;
          }
          else if(rightindex < size && arr[i] < arr[rightindex] ){
              swap(arr[rightindex],arr[i]);
              i=rightindex;
          }
          else{
              return;
          }
      }
      
  }
  
};
void heapify(int arr[],int n,int i){
    int largest=i;
    int left=2*i;
    int right=2*i +1;
    
    if(left <= n && arr[largest] < arr[left]){
        largest=left;
    }
    if(right <=n && arr[largest]<arr[right]){
        largest=right;
    }
    
    if(largest!=i){
        swap(arr[largest],arr[i]);
        heapify(arr,n,largest);
    }
}
void heapsort(int arr[],int n){
    int size=n;
    while(size>1){
        // step1
        swap(arr[size],arr[1]);
        size--;
        //step 2
        heapify(arr,size,1);
    }
}
int main(){
    heap h;
    h.insert(90);
    h.insert(45);
    h.insert(67);
    h.insert(34);
    h.insert(50);
    h.print();
    h.delete_element();
    h.print();
    int arr[6]={-1,34,56,12,45,50};
    int n=5;
    for(int i=n/2;i>0;i--){
        heapify(arr,n,i);
    }
    //printing array after heapify...
    cout<<"After heap creation"<<endl;
    for(int i=1;i<=n;i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl ;
    heapsort(arr,n);
    cout<<"Array sorted by heap sort method is"<<endl;
    for(int i=1;i<=n;i++){
        cout<<arr[i]<<" ";
    }
    
    
}
// what is cbt (complete binary tree)?
//->every level is compeltely filled except the last level....
//-> nodes added from left side
// max heap and min heap
//log(n) for insertion log(n)
//heap sort--> n*log(n)
