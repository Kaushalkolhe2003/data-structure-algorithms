#include <iostream>
using namespace std;
class Node{
     public:
     int data;
     Node* next;
    
    //constructor...
    Node(int d){
        this->data=d;
        this->next=NULL;
    }
    ~Node(){
        int value=this->data;
        if(this->next!=NULL){
            delete next;
            next=NULL;
        }
        cout<<"Memory is free for the data with value : "<<value<<endl;
    }
    
};
void insertnode(Node* &tail,int element ,int d){
    //assuming that the element presnet in the list
    if(tail==NULL){
        Node* newnode=new Node(d);
        tail=newnode;
        newnode ->next =newnode;
    }
    else{
        //non empty list 
        //assuming that the element is present in the list..
        Node* curr=tail;
        
        while(curr->data != element){
            curr=curr->next;
        }
        
        //element fount->curr is representing element wala Node
        Node* temp=new Node(d);
        temp->next= curr->next;
        curr ->next = temp;
        
        
    }
}
void print_LL(Node* &tail){
    Node *temp=tail;
    if(tail==NULL){
        cout<<"List is empty ....";
        return;
    }
    do{
        cout<<tail->data<<" ";
        tail=tail->next;
    }while(tail!=temp);
    cout<<endl;
}
void deletenode(Node * & tail, int value){
    //empty list...
    if(tail==NULL){
        cout<<"List is empty ,plz check again"<<endl;
        return;
    }
    else{
        //non empty wala case..
        Node* prev=tail;
        Node *curr =prev->next;
        while(curr->data !=value){
            prev=curr;
            curr=curr->next;
        }
        prev->next=curr->next;
        //when there is only one node present....
        if(curr==prev){
            tail=NULL;
            
        }
        // nodes >=2 linked list 
        else if(tail==curr){
            tail=prev;
         }
        curr->next=NULL;
        delete curr;
    }
    
}
int main()
{
   Node*tail=NULL;
   
   
   insertnode(tail,5,3);
   print_LL(tail);
   //insertnode(tail,3,5);
  // insertnode(tail,3,7);
    //  insertnode(tail,7,16);
    //  print_LL(tail);
      deletenode(tail,3);
        print_LL(tail);
           

}
